
create table salesman(
salesman_ID int primary key,
name varchar(20),
city varchar  (20),
comission DEC(10,2),
)


insert into  salesman values (5001,'James Hoog','NewYork',0.15)
insert into  salesman values (5002,'Nail Knites','Paris',0.13)
insert into  salesman values (5005,'Pit Alex','London',0.11)
insert into  salesman values (5006,'Mc Lyon','Paris',0.14)
insert into  salesman values (5003,'Lausen Hen','San Jose',0.12)
insert into  salesman values (5007,'Paul Adam','Rome',0.13)

select * from salesman

create table customer1(
customer_Id int primary key,
cust_name varchar(20),
city varchar(20),
grade int,
salesman_Id int constraint s2 foreign key(salesman_Id)references salesman(salesman_ID),
)


insert into customer1 values(3002,'nick rimando','new york',100,5001)
insert into customer1 values(3007,'brad davis','new york',200,5001)

insert into customer1 values(3005,'graham zusi','california',200,5002)
insert into customer1 values(3008,'julian green','london',300,5002)

insert into customer1 values(3004,'fabian johnson','paris',300,5006)
insert into customer1 values(3009,'geoff cameron','berlin',100,5003)
insert into customer1 values(3003,'jozy altidor','moscow',200,5007)
insert into customer1 values(3001,'bard guzan','london',null,5005)

select * from customer1


create table order2(
ord_no int,
purch_amt dec(10,2),
ord_date varchar(20),
customerID int constraint c2 foreign key(customerId)references  customer1(customer_Id),
saleId int  constraint s3 foreign key(saleId)references salesman(salesman_ID),
)

insert into order2 values(70001,150.5,'2012-10-05',3005,5002)
insert into order2 values(70009,270.65,'2012-09-10',3001,5005)
insert into order2 values(70002,65.26,'2012-10-05',3002,5001)
insert into order2 values(70004,110.5,'2012-08-17',3009,5003)
insert into order2 values(70007,948.5,'2012-09-10',3005,5002)
insert into order2 values(70005,2400.6,'2012-07-27',3007,5001)
insert into order2 values(70008,5760,'2012-09-10',3002,5001)
insert into order2 values(70010,1983.43,'2012-10-10',3004,5006)
insert into order2 values(70003, 2480.4 ,'2012-10-10',3009,5003)
insert into order2 values(70012 ,250.45,'2012-06-27',3008 ,  5002)
insert into order2 values(70011 , 75.29, ' 2012-08-17' , 3003,  5007)
insert into order2 values(70013,  3045.6 ,'2012-04-25' ,3002,  5001)

select * from order2


---From the following tables, write a SQL query to find all the orders issued by the salesman 'Paul Adam'.
--------------Return ord_no, purch_amt, ord_date, customer_id and salesman_id.-------------------------

SELECT * FROM order2
WHERE saleId =
    (SELECT salesman_id 
     FROM salesman 
     WHERE name='Paul Adam');

	 ----2------From the following tables write a SQL query to find all orders generated by London-based salespeople. 
	 --Return ord_no, purch_amt, ord_date, customer_id, salesman_id.

	 SELECT * FROM order2
WHERE saleId in
    (SELECT salesman_id 
     FROM salesman 
     WHERE city='London');

	 ----3-From the following tables write a SQL query to find all orders generated by the salespeople who may work for customers whose id is 3007. 
	 --Return ord_no, purch_amt, ord_date, customer_id, salesman_id.

	
	SELECT *
FROM order2
WHERE saleId =
    (SELECT DISTINCT saleId 
     FROM order2 
     WHERE customerId =3007);

	 select * from order2 where customerId = 3007


	 -----------------------------------------------------------
--4.From the following tables write a SQL query to find the order values greater than the average order value of 10th October 2012. 
----Return ord_no, purch_amt, ord_date, customer_id, salesman_id.

select * from order2
where purch_amt >
(select avg (purch_amt)
from order2
where ord_date='2012-10-10')

--5. From the following tables, write a SQL query to find all the orders generated in New York city. 
--Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

SELECT * FROM order2
WHERE saleId in
    (SELECT salesman_id 
     FROM salesman 
     WHERE city='NewYork');


	 --6. From the following tables write a SQL query to determine the commission of the salespeople in Paris. Return commission.

	select comission from salesman
	where salesman_ID in
	(select  salesman_ID from customer1
	where city='paris');

	--7-Write a query to display all the customers whose ID is 2001 below the salesperson ID of Mc Lyon.
	SELECT *
FROM customer1
WHERE customer_id =
    (SELECT salesman_id -2001
     FROM salesman
     WHERE name = 'Mc Lyon');

--8. From the following tables write a SQL query to count the number of customers with grades above the average in New York City. 
--Return grade and count.
SELECT grade, COUNT (*)
FROM customer1
GROUP BY grade
HAVING grade >
    (SELECT AVG(grade)
     FROM customer1
     WHERE city = 'New York');

	 select * from customer1

	 select avg(grade) from customer1
	 where city='new york'

	 --9. From the following tables, write a SQL query to find those salespeople who earned the maximum commission.
	 -- Return ord_no, purch_amt, ord_date, and salesman_id.

	SELECT ord_no, purch_amt, ord_date, saleId 
FROM order2 
WHERE saleId IN(
SELECT salesman_id 
FROM salesman
WHERE comission = (
SELECT MAX(comission) 
FROM salesman));


select *
FROM salesman
WHERE comission = (
SELECT MAX(comission) 
FROM salesman);


--10. From the following tables write SQL query to find the customers who placed orders on 17th August 2012. 
--Return ord_no, purch_amt, ord_date, customer_id, salesman_id and cust_name.

SELECT ord.*, cus.cust_name
FROM order2 ord, customer1 cus
WHERE cus.customer_id= ord.customerID
AND ord.ord_date='2012-08-17';


---11. From the following tables write a SQL query to find salespeople who had more than one customer. 
--Return salesman_id and name.
select *  from salesman

select salesman_id, name from salesman a
WHERE 1 < 
    (SELECT COUNT(*) 
     FROM customer1 
     WHERE salesman_id = a.salesman_id);

----12. From the following tables write a SQL query to find those orders, which are higher than the average amount of the orders.
--Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
--by using inner join

SELECT * 
FROM order2 a
WHERE purch_amt >
    (SELECT AVG(purch_amt) FROM order2 b 
     WHERE b.customerId = a.customerID);

	 select * from order2

--13.From the following tables write a SQL query to find those orders that are equal or higher than the average amount of the orders.
-- Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

SELECT * 
FROM order2 a
WHERE purch_amt >=
    (SELECT AVG(purch_amt) FROM order2 b 
     WHERE b.customerId = a.customerID);

--Write a query to find the sums of the amounts from the orders table, grouped by date, and eliminate all dates 
--where the sum was not at least 1000.00 above the maximum order amount for that date.

select ord_date, sum(purch_amt)
from order2 a
group by ord_date
having SUM(purch_amt)>(select 1000.00 + MAX(purch_amt)
from order2 b
where a.ord_date = b.ord_date)

---15. Write a query to extract all data from the customer table if and only if 
--one or more of the customers in the customer table are located in London.

select customer_Id,city, cust_name from customer1
where exists (select * from customer1 where city='london')

--16. From the following tables write a SQL query to find salespeople who deal with multiple customers.
-- Return salesman_id, name, city and commission.

select * from salesman
where salesman_ID in (select salesman_Id from customer1
group by salesman_ID having  COUNT(salesman_ID)>1);

SELECT * 
FROM salesman 
WHERE salesman_id IN (
   SELECT DISTINCT salesman_id 
   FROM customer1 a 
   WHERE EXISTS (
      SELECT * 
      FROM customer1 b 
      WHERE b.salesman_id=a.salesman_id 
      AND b.cust_name<>a.cust_name));


--17. From the following tables write a SQL query to find salespeople who deal with a single customer.
-- Return salesman_id, name, city and commission.

select * from salesman
where salesman_ID in (select salesman_Id from customer1
group by salesman_ID having  COUNT(salesman_ID)=1);


--18. From the following tables write a SQL query to find the salespeople who deal the customers with more than one order
--. Return salesman_id, name, city and commission.

select * from salesman
where salesman_ID in (select saleId from order2
group by saleId having  COUNT(saleId)>1);

--19.From the following tables write a SQL query to find the salespeople who deal with those customers who live in the same city.
-- Return salesman_id, name, city and commission.

SELECT *
FROM salesman 
WHERE city=ANY
    (SELECT city
     FROM customer1);

--20. From the following tables write a SQL query to find salespeople whose place of residence matches any city where customers live.
-- Return salesman_id, name, city and commission.

SELECT *
FROM salesman 
WHERE city in
    (SELECT city
     FROM customer1);
	 select * from salesman

--21. From the following tables write a SQL query to find all those salespeople whose names appear alphabetically lower than the customer’s name. 
--Return salesman_id, name, city, commission.

SELECT *
FROM salesman a
WHERE EXISTS
   (SELECT *
	FROM customer1 b
	WHERE  a.name  < b.cust_name);

--22.From the following table write a SQL query to find all those customers with a higher grade than any customer who belongs to the alphabetically lower than the city New York. 
--Return customer_id, cust_name, city, grade, salesman_id.

SELECT *
FROM customer1
WHERE grade > ANY
   (SELECT grade
	FROM customer1
	WHERE  city < 'New York');

--23. From the following table write a SQL query to find all those orders whose order amount exceeds at least one of the orders placed on September 10th 2012. 
--Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

SELECT *
FROM Order2
WHERE purch_amt > ANY
   (SELECT purch_amt
	FROM order2
	WHERE  ord_date='09-10-2012');

	--24. From the following tables write a SQL query to find orders where the order amount is less than the order amount of a customer residing in London City.
	-- Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

	SELECT *
FROM order2
WHERE purch_amt < ANY
   (SELECT purch_amt
	FROM order2 a, customer1 b
	WHERE  a.customerID=b.customer_id
	AND b.city='London');

--25. From the following tables write a SQL query to find those orders where every order amount is less than the maximum order amount of a customer who lives in London City.
-- Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
SELECT *
FROM order2
WHERE purch_amt < 
   (SELECT MAX (purch_amt)
	FROM order2 a, customer1 b
	WHERE  a.customerID=b.customer_id
	AND b.city='London');

